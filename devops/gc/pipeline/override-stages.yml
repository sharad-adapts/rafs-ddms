variables:
  GC_SERVICE: rafs-ddms
  GC_INT_TEST_TYPE: python

gc-containerize-gitlab:
  variables:
    BUILD_PATH: "./Dockerfile"
  before_script:
    - >
      if ( echo $CI_COMMIT_REF_NAME | grep -Eq "^release\/[0-9]{1,2}.[0-9]{1,2}$" );
      then
        export GC_VERSION="${CI_COMMIT_REF_NAME#*/}-${CI_COMMIT_REF_NAME%/*}";
      elif [[ $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH ]];
      then
        export GC_VERSION="0.0.0-$CI_DEFAULT_BRANCH";
      elif [[ $CI_COMMIT_TAG ]];
      then
        export GC_VERSION=$(echo $CI_COMMIT_TAG | sed "s/^v//");
      else
        export GC_VERSION="0.0.0-$CI_COMMIT_SHORT_SHA";
      fi;
    - echo $GC_VERSION
  script:
    - !reference [.gc_set_image_name, script]
    - >-
      docker build $EXTRA_TAG -f $BUILD_PATH
      --build-arg "build_date=$(TZ=UTC date)"
      --build-arg "commit_id=$CI_COMMIT_SHORT_SHA"
      --build-arg "commit_branch=$CI_COMMIT_REF_SLUG"
      --build-arg "commit_message=$CI_COMMIT_MESSAGE"
      --build-arg "release_version=$GC_VERSION"
      --build-arg "user_id=65532" .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/$IMAGE_NAME

gc-containerize-gcr:
  variables:
    BUILD_PATH: "./Dockerfile"
  before_script:
    - !reference [.gc_obtain_credentials, script]
    - gcloud auth configure-docker gcr.io
    - export GC_VERSION=$(echo $CI_COMMIT_TAG | sed "s/^v//")
    - echo $GC_VERSION
  script:
    - >-
      docker build -t $GC_GCR_REGISTRY/$GC_SERVICE/$IMAGE_NAME:$CI_COMMIT_TAG -f $BUILD_PATH
      --build-arg "build_date=$(TZ=UTC date)"
      --build-arg "commit_id=$CI_COMMIT_SHORT_SHA"
      --build-arg "commit_branch=$CI_COMMIT_REF_SLUG"
      --build-arg "commit_message=$CI_COMMIT_MESSAGE"
      --build-arg "release_version=$GC_VERSION"
      --build-arg "user_id=65532" .
    - docker push $GC_GCR_REGISTRY/$GC_SERVICE/$IMAGE_NAME:$CI_COMMIT_TAG

gc-osdutest:
  rules:
    - exists:
        - never/existing/file.txt

gc-test-python:
  script:
    - curl https://community.opengroup.org/api/v4/projects/1410/packages/generic/gc_auth_token/master/gc_auth_token -o gc_auth_token
    - chmod +x gc_auth_token
    - export GOOGLE_APPLICATION_CREDENTIALS=$GC_INTEGRATION_TESTER_SA_FILE
    - export GC_TOKEN=$(./gc_auth_token)
    - pip install -r requirements.txt
    - pip install -r requirements-tests.in
    - >-
      pytest -n auto tests/integration/tests
      --ddms-base-url ${DDMS_BASE_URL}
      --url-prefix ${URL_PREFIX}
      --partition ${DATA_PARTITION_ID}
      --bearer-token ${GC_TOKEN}
      --cloud-provider ${CLOUD_PROVIDER}
  # FIXME: should be deleted after int tests are configured correctly for GC implementation
  allow_failure: true

gc-baremetal-deploy:
  rules:
    - exists:
        - never/existing/file.txt

gc-baremetal-osdutest:
  rules:
    - exists:
        - never/existing/file.txt

gc-baremetal-test-python:
  rules:
    - exists:
        - never/existing/file.txt

gc-dev2-osdutest:
  rules:
    - exists:
        - never/existing/file.txt

gc-dev2-test-python:
  script:
    - curl https://community.opengroup.org/api/v4/projects/1410/packages/generic/gc_auth_token/master/gc_auth_token -o gc_auth_token
    - chmod +x gc_auth_token
    - export GOOGLE_APPLICATION_CREDENTIALS=$GC_INTEGRATION_TESTER_SA_FILE
    - export GC_TOKEN=$(./gc_auth_token)
    - pip install -r requirements.txt
    - pip install -r requirements-tests.in
    - >-
      pytest -n auto tests/integration/tests
      --ddms-base-url ${DDMS_BASE_URL}
      --url-prefix ${URL_PREFIX}
      --partition ${DATA_PARTITION_ID}
      --bearer-token ${GC_TOKEN}
      --cloud-provider ${CLOUD_PROVIDER}
  # FIXME: should be deleted after int tests are configured correctly for GC implementation
  allow_failure: true
