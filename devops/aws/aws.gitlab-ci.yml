include:
  - project: "osdu/platform/ci-cd-pipelines"
    file: "cloud-providers/aws-global-variables.yml"
  - project: "osdu/platform/ci-cd-pipelines"
    file: "cloud-providers/aws-global.yml"

aws-containerize:
  extends:
    - .aws
    - .aws_common_variables
    - .aws_variables
  stage: containerize
  script:
    - docker build -f Dockerfile -t $LOCAL_IMAGE_TAG .
    - $(aws ecr get-login --no-include-email --region $AWS_ECR_REGION)
    - docker tag $LOCAL_IMAGE_TAG $AWS_IMAGE_TAG_BASE:$CI_COMMIT_SHA
    - docker tag $LOCAL_IMAGE_TAG $AWS_IMAGE_TAG_BASE:latest
    - docker push $AWS_IMAGE_TAG_BASE:$CI_COMMIT_SHA
    - docker push $AWS_IMAGE_TAG_BASE:latest


aws_test_py:
  extends:
    - .aws
    - .aws_common_variables
    - .aws_variables
  tags: ["osdu-medium"]
  stage: integration
  image: ${CI_REGISTRY_IMAGE}:build-${CI_COMMIT_SHA}
  needs: ["aws-update-tf"]
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    PARTITION: opendes
  before_script:
    - apt-get update && apt-get install -y jq && apt-get install -y curl && apt-get install -y unzip
    - |
      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      unzip -q awscliv2.zip
      ./aws/install
    - !reference [.aws_variables, before_script]
    - export SERVICE_HOST_STORAGE=$AWS_BASE_URL/api/storage/v2
    - export SERVICE_HOST_LEGAL=$AWS_BASE_URL/api/legal/v1
    - >-
      export ACCESS_TOKEN=$(aws cognito-idp initiate-auth
      --auth-flow ${AWS_COGNITO_AUTH_FLOW}
      --client-id ${AWS_COGNITO_CLIENT_ID}
      --auth-parameters USERNAME=${AWS_COGNITO_AUTH_PARAMS_USER},PASSWORD=${AWS_COGNITO_AUTH_PARAMS_PASSWORD}
      | jq -r '.[].AccessToken // empty');
    - echo $ACCESS_TOKEN | wc -c
  script:
    - >-
      pytest -n 3
      ./tests/integration/tests
      --ddms-base-url $AWS_BASE_URL
      --url-prefix ${URL_PREFIX}
      --bearer-token ${ACCESS_TOKEN}
      --partition ${PARTITION}
      --cloud-provider aws
