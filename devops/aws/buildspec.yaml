# Copyright Â© 2021 Amazon Web Services
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html

# https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html
version: 0.2
env:
  secrets-manager:
    DOCKER_USERNAME: /osdu/devops/docker_credentials:username
    DOCKER_PASSWORD: /osdu/devops/docker_credentials:password
    SONAR_USERNAME: /osdu/devops/sonar_credentials:username
    SONAR_PASSWORD: /osdu/devops/sonar_credentials:password
  variables:
    SONAR_PATH: "app/providers/dependencies/aws"
    SONAR_TEST_PATH: "tests/test_api"
  parameter-store:
    SONAR_URL: /osdu/devops/sonar_url
phases:
  install:
    runtime-versions:
      python: 3.11
    commands:
     - if [ $(echo $CODEBUILD_SOURCE_VERSION | grep -c  ^refs/heads.*) -eq 1 ]; then echo "Branch name found"; else echo "This build only supports branch builds" && exit 1; fi
     - apt-get update -y
     - wget -nv https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472.zip
     - unzip -q ./sonar-scanner-cli-4.6.2.2472.zip
     - pip install safety
     - export SAY_LOCATION=`ln -s "$(which echo)" say`
     - export PATH="$PATH:$SAY_LOCATION"
     - git clone https://github.com/awslabs/git-secrets.git
     - cd git-secrets && make install && cd ..
     - git secrets --install && git secrets --register-aws
  pre_build:
    commands:
        - echo "Logging in to Amazon ECR..."
        - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_REGISTRY} # authenticate with ECR via the AWS CLI
  build:
    commands:
      - export AWS_ACCOUNT_ID=`aws sts get-caller-identity --query Account --output text`
      - export REPO_NAME=${PWD##*/}
      - export OUTPUT_DIR="dist"
      - export BRANCH_NAME=`echo ${CODEBUILD_SOURCE_VERSION} | awk '{gsub("refs/heads/","");gsub("\\.","-");gsub("[[:space:]]","-")}1' | sed 's/\//-/g' | awk '{print tolower($0)}'`
      - export ECR_TAG=`echo build.${BRANCH_NAME}.${CODEBUILD_BUILD_NUMBER}.${CODEBUILD_RESOLVED_SOURCE_VERSION} | cut -c 1-120`
      - export ECR_IMAGE=${ECR_REGISTRY}:${ECR_TAG}
      - export ECR_IMAGE_TEST=${ECR_REGISTRY}:${ECR_TAG}_TEST
      - export ECR_IMAGE_BRANCH_LATEST=${ECR_REGISTRY}:${BRANCH_NAME}
      - mkdir -p ${OUTPUT_DIR}/bin
      - mkdir -p ${OUTPUT_DIR}/testing

      - echo "Placeholder" >> ${OUTPUT_DIR}/build-info.json # touched so that the output directory has some content incase the build fails so that testing reports are uploaded
      - printenv

      - GIT_SECRETS_SCAN_RESULT=$(git secrets --scan 2> ${OUTPUT_DIR}/git_secrets.out.txt && echo OK || echo FAILED)
      - if [ "$GIT_SECRETS_SCAN_RESULT" = "FAILED" ]; then echo "Secrets detected!" && exit 1; fi

      - sed -i "s|__CONTAINER__|$ECR_IMAGE|"  devops/aws/chart/values.yaml
      - echo "--Copying Helm Charts to ${OUTPUT_DIR:-dist}--"
      - rsync -r devops/aws/* "${OUTPUT_DIR:-dist}"


      - echo "Running unit tests..."
      - export CLOUD_PROVIDER=aws
      - export CACHE_ENABLE=False
      - pip install -r requirements.txt -q
      - pip install pip-tools -q
      - pip-compile --output-file=requirements-test.txt requirements-tests.in
      - pip install -r requirements-test.txt -q

      - python3 -m pytest -p no:cacheprovider --ignore=integration   --junit-xml=unit_tests_report.xml --cov=app --cov-report=html --cov-report=xml ./tests/test_api

      - |
        java -jar sonar-scanner-4.6.2.2472/lib/sonar-scanner-cli-4.6.2.2472.jar -Dsonar.projectKey=rafs-ddms -Dsonar.host.url=${SONAR_URL} \
          -Dsonar.login=${SONAR_USERNAME} -Dsonar.password=${SONAR_PASSWORD} -Dsonar.branch.name=${BRANCH_NAME} -Dsonar.python.coverage.reportPaths=coverage.xml -Dsonar.sources=${SONAR_PATH} -Dsonar.tests=${SONAR_TEST_PATH}
      
      - safety check -r requirements.txt -r requirements_dev.txt -o text > safety_check.txt; EXITCODE=$?
      # override docker file with aws dockerfile
      - cp ./devops/aws/Dockerfile ./
      - echo "Build and push docker image..."
      - docker buildx create --driver docker-container --use
      - docker buildx inspect --bootstrap
      - docker buildx build --platform linux/arm64/v8,linux/amd64 --pull --push -f Dockerfile -t ${ECR_IMAGE} -t ${ECR_IMAGE_BRANCH_LATEST} .

      - echo "Building docker integration test image..."
      - docker build -f Dockerfile.tests -t ${ECR_IMAGE_TEST} .
      - docker tag  ${ECR_IMAGE_TEST} ${ECR_IMAGE_BRANCH_LATEST}
      - echo "Pushing docker image..."
      - docker push ${ECR_IMAGE_TEST}
      - docker push ${ECR_IMAGE_BRANCH_LATEST}

      - echo "Generate build-info.json"
      - |
        python devops/aws/build-info.py \
          --branch ${CODEBUILD_SOURCE_VERSION} \
          --commit ${CODEBUILD_RESOLVED_SOURCE_VERSION} \
          --buildid ${CODEBUILD_BUILD_ID} \
          --buildnumber ${CODEBUILD_BUILD_NUMBER} \
          --reponame ${REPO_NAME} \
          --outdir ${OUTPUT_DIR} \
          --artifact ${ECR_IMAGE} \
          --artifact ${ECR_IMAGE_TEST}

      - mkdir -p $OUTPUT_DIR/testing/integration/build-aws
      - cp devops/aws/run-tests.sh $OUTPUT_DIR/testing/integration/build-aws
      - cp -r tests $OUTPUT_DIR/testing/integration/build-aws
      - cp -r client $OUTPUT_DIR/testing/integration/build-aws



artifacts:
  files:
    - "**/*"
  base-directory: "dist"
  name: ${REPO_NAME}_${BRANCH_NAME}_$(date +%F)_${CODEBUILD_BUILD_NUMBER}.zip