include:
  - project: "osdu/platform/ci-cd-pipelines"
    file: "cloud-providers/azure.yml"

.maven:
  variables:

.python_test_report:
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  after_script:
    - coverage report
    - coverage xml

azure_containerize:
  image: docker:24.0.1-cli
  variables:
    SHA_IMAGE: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHA}
  before_script:
    - apk add git && docker buildx create --use
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker login ${AZURE_REGISTRY}.azurecr.io --username $AZURE_PRINCIPAL_ID --password $AZURE_PRINCIPAL_SECRET
  script:
    - >
      docker buildx build --push -t ${CI_REGISTRY_IMAGE}/${SHA_IMAGE}
      -t ${AZURE_REGISTRY}.azurecr.io/$SHA_IMAGE
      -f Dockerfile.distroless
      --cache-to type=registry,ref=${CI_REGISTRY_IMAGE}:build-cache
      --cache-from type=registry,ref=${CI_REGISTRY_IMAGE}:build-cache .
  after_script:
    - docker buildx rm

azure_containerize_helm:
  variables:
    AZURE_HELM_SUBDIR: osdu-ddms/standard-ddms

azure_deploy:
  script:
    # Install Service
    - helm show chart $HELM_CHART_OCI --version $HELM_CHART_OCI_VERSION
    - ENV_VAULT=$(kubectl get cm -n osdu osdu-svc-config -o jsonpath={.data.ENV_KEYVAULT} | sed -e 's/https:\/\///;s/.vault.azure.*//')
    - >-
      helm upgrade -i osdu-gitlab-$CI_PROJECT_NAME $HELM_CHART_OCI --version $HELM_CHART_OCI_VERSION -n osdu --wait --timeout 5m
      -f devops/azure/values.yaml
      --set azure.tenant=$AZURE_TENANT_ID
      --set azure.subscription=$AZURE_SUBSCRIPTION_ID
      --set azure.resourcegroup=$(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/base-name-cr --query value -otsv)-rg
      --set azure.identity=$(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/base-name-cr --query value -otsv)-osdu-identity
      --set azure.identity_id=$(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/osdu-identity-id --query value -otsv)
      --set azure.keyvault.name=$ENV_VAULT
      --set azure.acr=${AZURE_REGISTRY}.azurecr.io
      --set configuration[0].container.image=${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
      --set configuration[0].container.tag=${CI_COMMIT_SHA}
      --set ingress.dns=$AZURE_DNS_NAME
    - |
      echo "AZURE_REGISTRY_TOKEN=$(az acr login -n $AZURE_REGISTRY --expose-token --query 'accessToken' -otsv)" >> ${CI_PROJECT_DIR}/acr_tokens.env
      echo "DST_REGISTRY_TOKEN=$(az acr login -n msosdu --expose-token --query 'accessToken' -otsv)" >> ${CI_PROJECT_DIR}/acr_tokens.env
  artifacts:
    reports:
      dotenv: ${CI_PROJECT_DIR}/acr_tokens.env

azure_swagger_test:
  variables:
    AZURE_SWAGGER_PATH: api/rafs-ddms/v1/docs#/

azure_test_py:
  tags: ["osdu-small"]
  stage: integration
  image: ${CI_REGISTRY_IMAGE}:build-${CI_COMMIT_SHA}
  needs: ["azure_deploy"]
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    PARTITION: opendes
  extends:
    - .python_test_report
  before_script:
    - apt update -qqq -y && apt install -qqq -y curl jq &> /dev/null
    - !reference [.get_azure_access_token, script ]
  script:
    - >-
      coverage run -m pytest -n auto --junitxml=report.xml tests/integration/tests
      --ddms-base-url https://${AZURE_DNS_NAME}
      --url-prefix ${URL_PREFIX}
      --bearer-token ${ACCESS_TOKEN}
      --partition ${PARTITION}
  only:
    variables:
      - $AZURE == '1' && $AZURE_SKIP_DEPLOY != 'true' && $AZURE_TEST_TYPE == 'python'
  except:
    variables:
      - $AZURE_SKIP_TEST == 'true'
  cache:
    key:
      files:
        - requirements-test.in
      prefix: pipcache
    paths:
      - .cache

.get_azure_access_token:
  script:
    - >-
      ACCESS_TOKEN=$( 
      curl -Ls -XPOST "https://login.microsoftonline.com/${AZURE_TENANT_ID}/oauth2/v2.0/token"
      --data-urlencode "grant_type=refresh_token"
      --data-urlencode "refresh_token=${AZURE_REFRESH_TOKEN}"
      --data-urlencode "client_id=${AZURE_APP_ID}"
      --data-urlencode "client_secret=${AZURE_APP_SECRET}" | jq -r .access_token
      )
    - echo ${ACCESS_TOKEN} | head -c 10
