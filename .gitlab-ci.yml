variables:
  DDMS_NAME: rafs
  GIT_DEPTH: 1
  URL_PREFIX: api/rafs-ddms/v1

  # Azure specific
  AZURE_TEST_TYPE: python
  AZURE_SKIP_COVERAGE: "true"

include:
  - project: "osdu/platform/ci-cd-pipelines"
    file: "standard-setup.yml"

    # for compile-and-unit-test
  - project: "osdu/platform/ci-cd-pipelines"
    file: "build/python.yml"

  - project: "osdu/platform/ci-cd-pipelines"
    file: "scanners/fossa-python.yml"

  - project: "osdu/platform/ci-cd-pipelines"
    file: "scanners/gitlab-ultimate.yml"

  # AZURE provider
  - local: "/devops/azure/azure.gitlab-ci.yml"

.python_common_build: &python_common_build
  image: ${CI_REGISTRY_IMAGE}:build-${CI_COMMIT_SHA}
  variables:
    CONFIG_FILE: "setup.cfg"

# Faster builds for cicd and python tests dependencies
rafs-pre-build:
  stage: .pre
  image: docker:24.0.1-cli
  tags: ["osdu-medium"]
  extends:
    - .skipForTriggeringMergeRequests
  before_script:
    - apk add git && docker buildx create --use
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - >
      docker buildx build --push -t ${CI_REGISTRY_IMAGE}:build-latest -t ${CI_REGISTRY_IMAGE}:build-${CI_COMMIT_SHA}
      --cache-to type=registry,ref=${CI_REGISTRY_IMAGE}:build-cache
      --cache-from type=registry,ref=${CI_REGISTRY_IMAGE}:build-cache
      -f Dockerfile.tests .
  after_script:
    - docker buildx rm

compile-and-unit-test:
  image: ${CI_REGISTRY_IMAGE}:build-${CI_COMMIT_SHA}
  variables:
    CONFIG_FILE: "setup.cfg"
    PIP_CMD: pip
    PIP_REQUIREMENTS: requirements-tests.txt
    PYTEST_OPTIONS: "-p no:cacheprovider --ignore=${CI_PROJECT_DIR}/tests/integration"
    PYTEST_DIR: ./tests
  before_script:
    - pip-compile requirements.in requirements-tests.in -o python-pip-tests-output.txt
    - pylint ${CI_PROJECT_DIR} --rcfile=${CONFIG_FILE} --errors-only
    - flake8 ${CI_PROJECT_DIR} --config=${CONFIG_FILE}
    - flake8 ${CI_PROJECT_DIR} --select T1
    # Getting stuck behavior with python ci-cd common lib gets stuck in flake8 tests on venv
    # - !reference [.python, before_script]
