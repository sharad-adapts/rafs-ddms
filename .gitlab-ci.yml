variables:
  DDMS_NAME: rafs
  GIT_DEPTH: 1
  URL_PREFIX: api/rafs-ddms

  # Azure specific
  AZURE_TEST_TYPE: python
  AZURE_SKIP_COVERAGE: "true"

include:
  - project: "osdu/platform/ci-cd-pipelines"
    file: "standard-setup.yml"

    # for compile-and-unit-test
  - project: "osdu/platform/ci-cd-pipelines"
    file: "build/python.yml"

  - project: "osdu/platform/ci-cd-pipelines"
    file: "scanners/fossa-python.yml"

  - project: "osdu/platform/ci-cd-pipelines"
    file: "scanners/gitlab-ultimate.yml"

  # AZURE provider
  - local: "/devops/azure/azure.gitlab-ci.yml"

compile-and-unit-test:
  image: mcr.microsoft.com/mirror/docker/library/python:3.11-slim
  variables:
    PIP_CMD: pip
    PIP_REQUIREMENTS: >
      requirements.txt
    PYTEST_COV: app
    PYTEST_DIR: ./tests
    PYTEST_OPTIONS: >
      -p no:cacheprovider
      --ignore=${CI_PROJECT_DIR}/tests/integration
    PIP_REQUIREMENTS_TOOLING_ONLY: >-
      requirements-tests.in

# RAFS Specific jobs for quality check
build_rafs_tests:
  stage: build
  image: docker:24.0.1-cli
  tags: ["osdu-medium"]
  extends:
    - .skipForTriggeringMergeRequests
  before_script:
    - apk add git && docker buildx create --use
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - >
      docker buildx build --push -t ${CI_REGISTRY_IMAGE}:build-latest -t ${CI_REGISTRY_IMAGE}:build-${CI_COMMIT_SHA}
      --cache-to type=registry,ref=${CI_REGISTRY_IMAGE}:build-cache
      --cache-from type=registry,ref=${CI_REGISTRY_IMAGE}:build-cache
      -f Dockerfile.tests .
  after_script:
    - docker buildx rm

rafs_code_quality_check:
  image: ${CI_REGISTRY_IMAGE}:build-${CI_COMMIT_SHA}
  stage: scan
  extends:
    - .skipForTriggeringMergeRequests
  variables:
    CONFIG_FILE: "setup.cfg"
  script:
    - pylint ${CI_PROJECT_DIR} --rcfile=${CONFIG_FILE} --errors-only
    # Flake8 hands indefinately within venv
    - flake8 ${CI_PROJECT_DIR} --config=${CONFIG_FILE}
    - flake8 ${CI_PROJECT_DIR} --select T1
