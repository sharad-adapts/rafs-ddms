#  Copyright 2023 ExxonMobil Technology and Engineering Company
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# generated by datamodel-codegen:
#   filename:  https://stable-{{osdu}}.centralus.cloudapp.azure.com/api/schema-service/v1/schema/osdu:wks:work-product-component--MultiStageSeparatorTest:1.0.0
#   timestamp: 2023-04-11T05:01:11+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class Type(Enum):
    FeatureCollection = 'FeatureCollection'


class TypeModel(Enum):
    Point = 'Point'


class GeometryItem(BaseModel):
    coordinates: List[float] = Field(..., min_items=2)
    type: TypeModel
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Coordinate(BaseModel):
    __root__: List[Any]


class TypeModel1(Enum):
    LineString = 'LineString'


class GeometryItemModel(BaseModel):
    coordinates: List[Coordinate] = Field(..., min_items=2)
    type: TypeModel1
    bbox: Optional[List[float]] = Field(None, min_items=4)


class TypeModel2(Enum):
    Polygon = 'Polygon'


class GeometryItemModel1(BaseModel):
    coordinates: List[List[Coordinate]]
    type: TypeModel2
    bbox: Optional[List[float]] = Field(None, min_items=4)


class TypeModel3(Enum):
    MultiPoint = 'MultiPoint'


class GeometryItemModel2(BaseModel):
    coordinates: List[List[float]]
    type: TypeModel3
    bbox: Optional[List[float]] = Field(None, min_items=4)


class TypeModel4(Enum):
    MultiLineString = 'MultiLineString'


class GeometryItemModel3(BaseModel):
    coordinates: List[List[Coordinate]]
    type: TypeModel4
    bbox: Optional[List[float]] = Field(None, min_items=4)


class TypeModel5(Enum):
    MultiPolygon = 'MultiPolygon'


class GeometryItemModel4(BaseModel):
    coordinates: List[List[List[Coordinate]]]
    type: TypeModel5
    bbox: Optional[List[float]] = Field(None, min_items=4)


class TypeModel6(Enum):
    GeometryCollection = 'GeometryCollection'


class Geometry(GeometryItem):
    pass


class GeometryModel(GeometryItemModel):
    pass


class GeometryModel1(GeometryItemModel1):
    pass


class GeometryModel2(GeometryItemModel2):
    pass


class GeometryModel3(GeometryItemModel3):
    pass


class GeometryModel4(GeometryItemModel4):
    pass


class GeometryItemModel5(BaseModel):
    type: TypeModel6
    geometries: List[
        Union[
            Geometry,
            GeometryModel,
            GeometryModel1,
            GeometryModel2,
            GeometryModel3,
            GeometryModel4,
        ]
    ]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class TypeModel13(Enum):
    Feature = 'Feature'


class Feature(BaseModel):
    geometry: Optional[
        Union[
            GeometryItem,
            GeometryItemModel,
            GeometryItemModel1,
            GeometryItemModel2,
            GeometryItemModel3,
            GeometryItemModel4,
            GeometryItemModel5,
        ]
    ]
    type: TypeModel13
    properties: Union[Any, Dict[str, Any]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Field0(BaseModel):
    type: Type
    features: List[Feature]
    bbox: Optional[List[float]] = Field(None, min_items=4)
