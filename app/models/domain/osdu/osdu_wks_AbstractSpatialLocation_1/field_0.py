#  Copyright 2023 ExxonMobil Technology and Engineering Company
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# generated by datamodel-codegen:
#   filename:  /api/schema-service/v1/schema/osdu:wks:work-product-component--MultiStageSeparatorTest:1.0.0
#   timestamp: 2023-04-11T05:01:11+00:00

from __future__ import annotations

from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel, Field, constr

from ..osdu_wks_AbstractAnyCrsFeatureCollection_1 import field_0
from ..osdu_wks_AbstractFeatureCollection_1 import field_0 as field_0_1


class Field0(BaseModel):
    AsIngestedCoordinates: Optional[field_0.Field0] = Field(
        None,
        description="The original or 'as ingested' coordinates (Point, MultiPoint, LineString, MultiLineString, Polygon or MultiPolygon). The name 'AsIngestedCoordinates' was chosen to contrast it to 'OriginalCoordinates', which carries the uncertainty whether any coordinate operations took place before ingestion. In cases where the original CRS is different from the as-ingested CRS, the AppliedOperations can also contain the list of operations applied to the coordinate prior to ingestion. The data structure is similar to GeoJSON FeatureCollection, however in a CRS context explicitly defined within the AbstractAnyCrsFeatureCollection. The coordinate sequence follows GeoJSON standard, i.e. 'eastward/longitude', 'northward/latitude' {, 'upward/height' unless overridden by an explicit direction in the AsIngestedCoordinates.VerticalCoordinateReferenceSystemID}.",
        title='As Ingested Coordinates',
    )
    SpatialParameterTypeID: Optional[
        constr(
            regex=r'^[\w\-\.]+:reference-data\-\-SpatialParameterType:[\w\-\.\:\%]+:[0-9]*$'
        )
    ] = Field(
        None,
        description='A type of spatial representation of an object, often general (e.g. an Outline, which could be applied to Field, Reservoir, Facility, etc.) or sometimes specific (e.g. Onshore Outline, State Offshore Outline, Federal Offshore Outline, 3 spatial representations that may be used by Countries).',
    )
    QuantitativeAccuracyBandID: Optional[
        constr(
            regex=r'^[\w\-\.]+:reference-data\-\-QuantitativeAccuracyBand:[\w\-\.\:\%]+:[0-9]*$'
        )
    ] = Field(
        None,
        description='An approximate quantitative assessment of the quality of a location (accurate to > 500 m (i.e. not very accurate)), to < 1 m, etc.',
    )
    CoordinateQualityCheckRemarks: Optional[List[str]] = Field(
        None, description='Freetext remarks on Quality Check.'
    )
    AppliedOperations: Optional[List[str]] = Field(
        None,
        description='The audit trail of operations applied to the coordinates from the original state to the current state. The list may contain operations applied prior to ingestion as well as the operations applied to produce the Wgs84Coordinates. The text elements refer to ESRI style CRS and Transformation names, which may have to be translated to EPSG standard names.',
        example=[
            'conversion from ED_1950_UTM_Zone_31N to GCS_European_1950; 1 points converted',
            'transformation GCS_European_1950 to GCS_WGS_1984 using ED_1950_To_WGS_1984_24; 1 points successfully transformed',
        ],
        title='Operations Applied',
    )
    QualitativeSpatialAccuracyTypeID: Optional[
        constr(
            regex=r'^[\w\-\.]+:reference-data\-\-QualitativeSpatialAccuracyType:[\w\-\.\:\%]+:[0-9]*$'
        )
    ] = Field(
        None,
        description='A qualitative description of the quality of a spatial location, e.g. unverifiable, not verified, basic validation.',
    )
    CoordinateQualityCheckPerformedBy: Optional[str] = Field(
        None, description='The user who performed the Quality Check.'
    )
    SpatialLocationCoordinatesDate: Optional[datetime] = Field(
        None, description='Date when coordinates were measured or retrieved.'
    )
    CoordinateQualityCheckDateTime: Optional[datetime] = Field(
        None, description='The date of the Quality Check.'
    )
    Wgs84Coordinates: Optional[field_0_1.Field0] = Field(
        None,
        description='The normalized coordinates (Point, MultiPoint, LineString, MultiLineString, Polygon or MultiPolygon) based on WGS 84 (EPSG:4326 for 2-dimensional coordinates, EPSG:4326 + EPSG:5714 (MSL) for 3-dimensional coordinates). This derived coordinate representation is intended for global discoverability only. The schema of this substructure is identical to the GeoJSON FeatureCollection https://geojson.org/schema/FeatureCollection.json. The coordinate sequence follows GeoJSON standard, i.e. longitude, latitude {, height}',
        title='WGS 84 Coordinates',
    )
    SpatialGeometryTypeID: Optional[
        constr(
            regex=r'^[\w\-\.]+:reference-data\-\-SpatialGeometryType:[\w\-\.\:\%]+:[0-9]*$'
        )
    ] = Field(
        None,
        description='Indicates the expected look of the SpatialParameterType, e.g. Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon. The value constrains the type of geometries in the GeoJSON Wgs84Coordinates and AsIngestedCoordinates.',
    )
