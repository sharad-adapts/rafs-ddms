#  Copyright 2023 ExxonMobil Technology and Engineering Company
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# generated by datamodel-codegen:
#   filename:  vitrinite_reflectant_data_schema.json
#   timestamp: 2023-11-27T15:19:58+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import Extra, Field, constr

from app.models.config import RafsBaseModel


class VitriniteReflectanceReading(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    ReadingOrder: Optional[float] = None
    Frequency: Optional[float] = None


class VitriniteReflectanceHistogramPopulation(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    PopulationType: Optional[
        constr(
            regex=r"^[\w\-\.]+:reference-data\-\-VitriniteReflectancePopulationType:[\w\-\.\:\%]+:[0-9]*$"
        )
    ] = None
    PopulationTypeValue: Optional[float] = Field(
        None,
        description="The population type observation value, used when the same type is assigned to two or more populations based on different interpretations. e.g. reworked-2 will have a value of 2",
    )
    PopulationMean: Optional[float] = Field(
        None,
        description="mean value of vitrinite reflectance readings within a population",
    )
    PopulationStDv: Optional[float] = Field(
        None,
        description="standard deviation value of vitrinite reflectance readings within a population",
    )
    PopulationQualifier: Optional[str] = Field(
        None, description="Vitrinite reflectance qualifier within a population"
    )
    TotalPopulationReadings: Optional[float] = Field(
        None, description="number of vitrinite refelctance readings in the population"
    )
    MinimumReading: Optional[float] = Field(
        None, description="Minimum value of range comprising the population"
    )
    MaximumReading: Optional[float] = Field(
        None, description="Maximum value of range comprising the population"
    )


class Model(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    SamplesAnalysisID: constr(
        regex=r"^[\w\-\.]+:work-product-component\-\-SamplesAnalysis:[\w\-\.\:\%]+:[0-9]*$"
    )
    SampleID: constr(regex=r"^[\w\-\.]+:master-data\-\-Sample:[\w\-\.\:\%]+:[0-9]*$")
    Method: Optional[str] = Field(None, description="The sample analysis method used for this analysis")
    VitriniteReflectanceReadings: Optional[List[VitriniteReflectanceReading]] = Field(
        None,
        description="The percentage of incident light reflected from the surface of vitrinite particles in a sample",
        title="Vitrinite Reflectance Readings",
    )
    VitriniteMountTechnique: Optional[
        constr(
            regex=r"^[\w\-\.]+:reference-data\-\-VitriniteMountTechnique:[\w\-\.\:\%]+:[0-9]*$"
        )
    ] = Field(None, description="Preparation technique for vitrinite mount")
    VitriniteReflectanceHistogramPopulations: Optional[
        List[VitriniteReflectanceHistogramPopulation]
    ] = Field(
        None,
        description="The population of dispersed organic matter that is relevant to thermal maturity determination",
        title="Vitrinite Reflectance Histogram Populations",
    )
