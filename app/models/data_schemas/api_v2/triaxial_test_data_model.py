#  Copyright 2023 ExxonMobil Technology and Engineering Company
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# generated by datamodel-codegen:
#   filename:  triaxial_test_data_schema.json
#   timestamp: 2023-12-18T16:59:56+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import Extra, Field, constr

from app.models.config import RafsBaseModel


class BulkDensityAsReceived(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class TestPorePressure(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class TestConfiningPressure(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class IRSCPorePressure(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class IRSCMeanEffectiveStress(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class IRSCDifferentialStress(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class MassAsReceived(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class SaturatedMass(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class Time(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class PorePressure(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class ConfiningPressure(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class AxialStrain(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class RadialStrain(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class AxialStress(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class DifferentialStress(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class AxialPWaveVelocity(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class AxialSWaveVelocity(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class TestStep(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Time: Optional[Time] = None
    PorePressure: Optional[PorePressure] = None
    ConfiningPressure: Optional[ConfiningPressure] = None
    AxialStrain: Optional[AxialStrain] = None
    RadialStrain: Optional[RadialStrain] = None
    AxialStress: Optional[AxialStress] = None
    DifferentialStress: Optional[DifferentialStress] = None
    AxialPWaveVelocity: Optional[AxialPWaveVelocity] = None
    AxialSWaveVelocity: Optional[AxialSWaveVelocity] = None


class StageNumber(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None


class PlugOrientationToBeddingPlaneNormal(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class PeakCompressiveStrength(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class EffectiveCompressiveStrength(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class YoungsModulus(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None
    LoadingStage: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--LoadingStage:[\w\-\.\:\%]+:[0-9]*$")
    ] = Field(None, description="Loading or Unloading stage")


class PoissonsRatio(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    LoadingStage: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--LoadingStage:[\w\-\.\:\%]+:[0-9]*$")
    ] = Field(None, description="Loading or Unloading stage")


class UnconfinedCompressiveStrength(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class InferredUnconfinedCompressiveStrength(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class Cohesion(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class InternalFrictionCoefficient(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class InternalFrictionAngle(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class Alpha(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None
    UnitOfMeasure: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$")
    ] = None


class Beta(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = None


class InterpretationItem(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    StageNumber: Optional[StageNumber] = Field(
        None,
        description="In multifrac stage tests, this identifies each fracture stage.",
    )
    PlugOrientationToBeddingPlaneNormal: Optional[
        PlugOrientationToBeddingPlaneNormal
    ] = Field(
        None, description="Angle in degrees of plug orientation to bedding plane normal"
    )
    PeakCompressiveStrength: Optional[PeakCompressiveStrength] = None
    EffectiveCompressiveStrength: Optional[EffectiveCompressiveStrength] = None
    YoungsModulus: Optional[YoungsModulus] = None
    PoissonsRatio: Optional[PoissonsRatio] = None
    UnconfinedCompressiveStrength: Optional[UnconfinedCompressiveStrength] = None
    InferredUnconfinedCompressiveStrength: Optional[
        InferredUnconfinedCompressiveStrength
    ] = Field(
        None,
        description="Mohr-Coulomb Failure Analysis Unconfined Compressive Strength",
    )
    Cohesion: Optional[Cohesion] = Field(
        None, description="Mohr-Coulomb Failure Analysis Cohesion"
    )
    InternalFrictionCoefficient: Optional[InternalFrictionCoefficient] = Field(
        None, description="Mohr-Coulomb Failure Analysis Internal Friction Coefficient"
    )
    InternalFrictionAngle: Optional[InternalFrictionAngle] = Field(
        None, description="Mohr-Coulomb Failure Analysis Internal Friction Angle"
    )
    Alpha: Optional[Alpha] = Field(
        None, description="Drucker-Prager Failure Analysis Alpha"
    )
    Beta: Optional[Beta] = Field(
        None, description="Drucker-Prager Failure Analysis Beta"
    )


class Model(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    SamplesAnalysisID: constr(
        regex=r"^[\w\-\.]+:work-product-component\-\-SamplesAnalysis:[\w\-\.\:\%]+:[0-9]*$"
    )
    SampleID: constr(regex=r"^[\w\-\.]+:master-data\-\-Sample:[\w\-\.\:\%]+:[0-9]*$")
    BulkDensityAsReceived: Optional[BulkDensityAsReceived] = None
    TestPorePressure: Optional[TestPorePressure] = None
    TestConfiningPressure: Optional[TestConfiningPressure] = None
    FluidSaturant: Optional[
        constr(
            regex=r"^[\w\-\.]+:reference-data--FluidSaturantType:[\w\-\.\:\%]+:[0-9]*$"
        )
    ] = None
    IRSCPorePressure: Optional[IRSCPorePressure] = None
    IRSCMeanEffectiveStress: Optional[IRSCMeanEffectiveStress] = None
    IRSCDifferentialStress: Optional[IRSCDifferentialStress] = None
    MassAsReceived: Optional[MassAsReceived] = None
    SaturatedMass: Optional[SaturatedMass] = None
    CutFluid: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--CutFluidType:[\w\-\.\:\%]+:[0-9]*$")
    ] = Field(
        None, description="Cutting Fluid used when preparing this sample for testing"
    )
    LoadingCondition: Optional[str] = Field(None, title="Loading Condition")
    ConsolidationType: Optional[
        constr(
            regex=r"^[\w\-\.]+:reference-data--ConsolidationType:[\w\-\.\:\%]+:[0-9]*$"
        )
    ] = Field(None, description="Consolidation Type, e.g. Isotropic")
    DrainageCondition: Optional[
        constr(
            regex=r"^[\w\-\.]+:reference-data--DrainageCondition:[\w\-\.\:\%]+:[0-9]*$"
        )
    ] = Field(
        None, description="Categorization of drainage of the sample, e.g. Drained"
    )
    LoadingMethod: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data--LoadingMethod:[\w\-\.\:\%]+:[0-9]*$")
    ] = Field(
        None,
        description="Method by which stress is applied, or loaded, onto the sample",
    )
    TestSteps: Optional[List[TestStep]] = None
    Interpretation: Optional[List[InterpretationItem]] = Field(
        None,
        description="Typically Interpretation will only have one record, though in cases where a sample is tested across multiple fracture stages, it will have more than one",
    )
