#  Copyright 2024 ExxonMobil Technology and Engineering Company
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# generated by datamodel-codegen:
#   filename:  gas_chromatography_analyses.1.0.0.json
#   timestamp: 2025-02-10T22:00:13+00:00

from __future__ import annotations

from app.models.config import RafsBaseModel

from datetime import date
from typing import List, Optional, Union

from pydantic import Extra, Field, constr


class Meta(RafsBaseModel):
    kind: str = Field(
        "Unit",
        const=True,
        description="The kind of reference, 'Unit' for FrameOfReferenceUOM.",
        title="UOM Reference Kind",
    )
    name: Optional[str] = Field(
        None,
        description="The unit symbol or name of the unit.",
        example="ft[US]",
        title="UOM Unit Symbol",
    )
    persistableReference: Optional[str] = Field(
        None,
        description="The self-contained, persistable reference string uniquely identifying the Unit.",
        example='{"abcd":{"a":0.0,"b":1200.0,"c":3937.0,"d":0.0},"symbol":"ft[US]","baseMeasurement":{"ancestry":"L","type":"UM"},"type":"UAD"}',
        title="UOM Persistable Reference",
    )
    unitOfMeasureID: Optional[
        constr(
            regex=r"^[\w\-\.]+:reference-data\-\-UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$"
        )
    ] = Field(
        None,
        description="SRN to unit of measure reference.",
        example="namespace:reference-data--UnitOfMeasure:ftUS:",
    )
    propertyNames: Optional[List[str]] = Field(
        None,
        description='The list of property names, to which this meta data item provides Unit context to. A full path like "StructureA.PropertyB" is required to define a unique context; "data" is omitted since frame-of reference normalization only applies to the data block.',
        example=["HorizontalDeflection.EastWest", "HorizontalDeflection.NorthSouth"],
        title="UOM Property Names",
    )


class Meta1(RafsBaseModel):
    kind: str = Field(
        "CRS",
        const=True,
        description="The kind of reference, constant 'CRS' for FrameOfReferenceCRS.",
        title="CRS Reference Kind",
    )
    name: Optional[str] = Field(
        None,
        description="The name of the CRS.",
        example="WGS 84 / UTM zone 15N",
        title="CRS Name",
    )
    persistableReference: str = Field(
        ...,
        description="The self-contained, persistable reference string uniquely identifying the CRS.",
        example='{"authCode":{"auth":"EPSG","code":"32615"},"name":"WGS_1984_UTM_Zone_15N","type":"LBC","ver":"PE_10_9_1","wkt":"PROJCS[\\"WGS_1984_UTM_Zone_15N\\",GEOGCS[\\"GCS_WGS_1984\\",DATUM[\\"D_WGS_1984\\",SPHEROID[\\"WGS_1984\\",6378137.0,298.257223563]],PRIMEM[\\"Greenwich\\",0.0],UNIT[\\"Degree\\",0.0174532925199433]],PROJECTION[\\"Transverse_Mercator\\"],PARAMETER[\\"False_Easting\\",500000.0],PARAMETER[\\"False_Northing\\",0.0],PARAMETER[\\"Central_Meridian\\",-93.0],PARAMETER[\\"Scale_Factor\\",0.9996],PARAMETER[\\"Latitude_Of_Origin\\",0.0],UNIT[\\"Meter\\",1.0],AUTHORITY[\\"EPSG\\",32615]]"}',
        title="CRS Persistable Reference",
    )
    coordinateReferenceSystemID: Optional[
        constr(
            regex=r"^[\w\-\.]+:reference-data\-\-CoordinateReferenceSystem:[\w\-\.\:\%]+:[0-9]*$"
        )
    ] = Field(
        None,
        description="SRN to CRS reference.",
        example="namespace:reference-data--CoordinateReferenceSystem:Projected:EPSG::32615:",
    )
    propertyNames: Optional[List[str]] = Field(
        None,
        description='The list of property names, to which this meta data item provides CRS context to. A full path like "StructureA.PropertyB" is required to define a unique context; "data" is omitted since frame-of reference normalization only applies to the data block.',
        example=["KickOffPosition.X", "KickOffPosition.Y"],
        title="CRS Property Names",
    )


class Meta2(RafsBaseModel):
    kind: str = Field(
        "DateTime",
        const=True,
        description="The kind of reference, constant 'DateTime', for FrameOfReferenceDateTime.",
        title="DateTime Reference Kind",
    )
    name: Optional[str] = Field(
        None,
        description="The name of the DateTime format and reference.",
        example="UTC",
        title="DateTime Name",
    )
    persistableReference: str = Field(
        ...,
        description="The self-contained, persistable reference string uniquely identifying DateTime reference.",
        example='{"format":"yyyy-MM-ddTHH:mm:ssZ","timeZone":"UTC","type":"DTM"}',
        title="DateTime Persistable Reference",
    )
    propertyNames: Optional[List[str]] = Field(
        None,
        description='The list of property names, to which this meta data item provides DateTime context to. A full path like "StructureA.PropertyB" is required to define a unique context; "data" is omitted since frame-of reference normalization only applies to the data block.',
        example=["Acquisition.StartTime", "Acquisition.EndTime"],
        title="DateTime Property Names",
    )


class Meta3(RafsBaseModel):
    kind: str = Field(
        "AzimuthReference",
        const=True,
        description="The kind of reference, constant 'AzimuthReference', for FrameOfReferenceAzimuthReference.",
        title="AzimuthReference Reference Kind",
    )
    name: Optional[str] = Field(
        None,
        description="The name of the CRS or the symbol/name of the unit.",
        example="TrueNorth",
        title="AzimuthReference Name",
    )
    persistableReference: str = Field(
        ...,
        description="The self-contained, persistable reference string uniquely identifying AzimuthReference.",
        example='{"code":"TrueNorth","type":"AZR"}',
        title="AzimuthReference Persistable Reference",
    )
    propertyNames: Optional[List[str]] = Field(
        None,
        description='The list of property names, to which this meta data item provides AzimuthReference context to. A full path like "StructureA.PropertyB" is required to define a unique context; "data" is omitted since frame-of reference normalization only applies to the data block.',
        example=["Bearing"],
        title="AzimuthReference Property Names",
    )


class Peak(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    AreaValue: Optional[float] = Field(
        None,
        description="Captures the value of the area under the peak.",
        title="Area Value",
    )
    AreaConcentration: Optional[float] = Field(
        None,
        description="Concentration of a compound measured using area under the peak for both the compound of interest and the standard compound, along with the known concentration of the standard.",
        title="Area Concentration",
    )
    HeightValue: Optional[float] = Field(
        None,
        description="Captures the value of the peak's height.",
        title="Height Value",
    )
    HeightConcentration: Optional[float] = Field(
        None,
        description="Concentration of a compound measured using height under the peak for both the compound of interest and the standard compound, along with the known concentration of the standard.",
        title="Height Concentration",
    )
    PeakValueTypeUnknown: Optional[float] = Field(
        None,
        description="Captures the value of a peak reported without area or height specified.  If the height or area is specified, HeightValue or AreaValue should be used, respectively.",
        title="Peak Value Type Unknown",
    )


class GasChromatographyAnalysi(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    ComponentNameID: Optional[
        constr(
            regex=r"^[\w\-\.]+:reference-data\-\-SampleOrganicCompositionComponent:[\w\-\.\:\%]+:[0-9]*$"
        )
    ] = Field(
        None,
        description="Name of the component in this analysis.  In the case of internal standard compounds, the name of the actual compound should be used in lieu of, e.g. 'STD1', if it is known.",
        title="Component Name ID",
    )
    RetentionTime: Optional[float] = Field(
        None,
        description="The time it takes for a compound to pass through the GC column and be detected, providing a reference point for comparing other compounds.",
        title="Retention Time",
    )
    Peak: Optional[Peak] = Field(
        None,
        description="A graphical representation of the highest point (peak) of a detected signal for a compound in the chromatogram graph, a signal which represents to the compound's concentration as a function of time.",
        title="Peak",
    )
    IsInternalStandard: Optional[bool] = Field(
        None,
        description="Identifies whether the component is an internal standard.",
        title="Is Internal Standard",
    )


class InternalStandardCompoundItem(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    ComponentNameID: Optional[
        constr(
            regex=r"^[\w\-\.]+:reference-data\-\-SampleOrganicCompositionComponent:[\w\-\.\:\%]+:[0-9]*$"
        )
    ] = Field(
        None,
        description="Name of the component in this analysis.",
        title="Component Name ID",
    )
    Mass: Optional[float] = Field(
        None, description="The mass of the standard compound.", title="Mass"
    )
    Concentration: Optional[float] = Field(
        None,
        description="The concentration of the standard compound.",
        title="Concentration",
    )


class Remark(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    RemarkSequenceNumber: Optional[int] = Field(
        None,
        description="A unique identifier for each remark record. This identifier is used to uniquely identify a member in an array of remarks.",
        example=1,
        title="Remark Sequence Number",
    )
    Remark: Optional[str] = Field(
        None, description="A descriptive comment for this remark.", title="Remark"
    )
    RemarkSource: Optional[str] = Field(
        None,
        description="The person, vendor, interpreter or other provider of information.",
        title="Remark Source",
    )
    RemarkDate: Optional[date] = Field(
        None, description="The date the remark was issued.", title="Remark Date"
    )


class GasChromatographyAnalysesModel100(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    SamplesAnalysisID: constr(
        regex=r"^[\w\-\.]+:work-product-component\-\-SamplesAnalysis:[\w\-\.\:\%]+:[0-9]*$"
    ) = Field(
        ...,
        description="OSDU Identifier for this SamplesAnalysis.",
        title="Samples Analysis ID",
    )
    SampleID: constr(
        regex=r"^[\w\-\.]+:master-data\-\-Sample:[\w\-\.\:\%]+:[0-9]*$"
    ) = Field(
        ...,
        description="OSDU Identifier for the Sample associated with this analysis.",
        title="Sample ID",
    )
    Meta: List[Union[Meta, Meta1, Meta2, Meta3]] = Field(
        ...,
        description="A meta data item, which allows the association of named properties or property values to a Unit/Measurement/CRS/Azimuth/Time context.",
        example="",
        title="Meta",
    )
    SampleMass: float = Field(
        ..., description="Reported mass of the analyzed sample.", title="Sample Mass"
    )
    Method: Optional[str] = Field(
        None,
        description="Free string object to account for any particular methods or lab-specific analysis details.",
        title="Method",
    )
    GasChromatographyAnalysis: Optional[List[GasChromatographyAnalysi]] = Field(
        None,
        description="Hydrocarbon abundance measured by gas chromatography, e.g. Aromatic,Gasoline,HighTemperature,Pyrolysis,Saturate,SimulatedDistillation,SulfurDetection,ThermalExtraction,WholeOil",
        title="Gas Chromatography Analysis",
    )
    InternalStandardCompound: Optional[List[InternalStandardCompoundItem]] = Field(
        None,
        description="One or more compounds added to a sample in a known quantity before the analysis begins; Also known as an internal standard. Used for accurate identification and quantification.",
        title="Internal Standard Compound",
    )
    Remarks: Optional[List[Remark]] = Field(
        None,
        description="Array object capturing remarks or additional information for this test step.  Remarks for the analysis as a whole should be captured in the associated SamplesAnalysis work product component.",
        example="",
        title="Remarks",
    )
