#  Copyright 2025 ExxonMobil Technology and Engineering Company
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# generated by datamodel-codegen:
#   filename:  triaxial.1.0.0.json
#   timestamp: 2025-02-11T18:59:47+00:00

from __future__ import annotations

from app.models.config import RafsBaseModel

from typing import List, Optional, Union

from pydantic import Extra, Field, constr


class Meta(RafsBaseModel):
    kind: str = Field(
        "Unit",
        const=True,
        description="The kind of reference, 'Unit' for FrameOfReferenceUOM.",
        title="UOM Reference Kind",
    )
    name: Optional[str] = Field(
        None,
        description="The unit symbol or name of the unit.",
        example="ft[US]",
        title="UOM Unit Symbol",
    )
    persistableReference: Optional[str] = Field(
        None,
        description="The self-contained, persistable reference string uniquely identifying the Unit.",
        example='{"abcd":{"a":0.0,"b":1200.0,"c":3937.0,"d":0.0},"symbol":"ft[US]","baseMeasurement":{"ancestry":"L","type":"UM"},"type":"UAD"}',
        title="UOM Persistable Reference",
    )
    unitOfMeasureID: Optional[
        constr(
            regex=r"^[\w\-\.]+:reference-data\-\-UnitOfMeasure:[\w\-\.\:\%]+:[0-9]*$"
        )
    ] = Field(
        None,
        description="SRN to unit of measure reference.",
        example="namespace:reference-data--UnitOfMeasure:ftUS:",
    )
    propertyNames: Optional[List[str]] = Field(
        None,
        description='The list of property names, to which this meta data item provides Unit context to. A full path like "StructureA.PropertyB" is required to define a unique context; "data" is omitted since frame-of reference normalization only applies to the data block.',
        example=["HorizontalDeflection.EastWest", "HorizontalDeflection.NorthSouth"],
        title="UOM Property Names",
    )


class Meta1(RafsBaseModel):
    kind: str = Field(
        "CRS",
        const=True,
        description="The kind of reference, constant 'CRS' for FrameOfReferenceCRS.",
        title="CRS Reference Kind",
    )
    name: Optional[str] = Field(
        None,
        description="The name of the CRS.",
        example="WGS 84 / UTM zone 15N",
        title="CRS Name",
    )
    persistableReference: str = Field(
        ...,
        description="The self-contained, persistable reference string uniquely identifying the CRS.",
        example='{"authCode":{"auth":"EPSG","code":"32615"},"name":"WGS_1984_UTM_Zone_15N","type":"LBC","ver":"PE_10_9_1","wkt":"PROJCS[\\"WGS_1984_UTM_Zone_15N\\",GEOGCS[\\"GCS_WGS_1984\\",DATUM[\\"D_WGS_1984\\",SPHEROID[\\"WGS_1984\\",6378137.0,298.257223563]],PRIMEM[\\"Greenwich\\",0.0],UNIT[\\"Degree\\",0.0174532925199433]],PROJECTION[\\"Transverse_Mercator\\"],PARAMETER[\\"False_Easting\\",500000.0],PARAMETER[\\"False_Northing\\",0.0],PARAMETER[\\"Central_Meridian\\",-93.0],PARAMETER[\\"Scale_Factor\\",0.9996],PARAMETER[\\"Latitude_Of_Origin\\",0.0],UNIT[\\"Meter\\",1.0],AUTHORITY[\\"EPSG\\",32615]]"}',
        title="CRS Persistable Reference",
    )
    coordinateReferenceSystemID: Optional[
        constr(
            regex=r"^[\w\-\.]+:reference-data\-\-CoordinateReferenceSystem:[\w\-\.\:\%]+:[0-9]*$"
        )
    ] = Field(
        None,
        description="SRN to CRS reference.",
        example="namespace:reference-data--CoordinateReferenceSystem:Projected:EPSG::32615:",
    )
    propertyNames: Optional[List[str]] = Field(
        None,
        description='The list of property names, to which this meta data item provides CRS context to. A full path like "StructureA.PropertyB" is required to define a unique context; "data" is omitted since frame-of reference normalization only applies to the data block.',
        example=["KickOffPosition.X", "KickOffPosition.Y"],
        title="CRS Property Names",
    )


class Meta2(RafsBaseModel):
    kind: str = Field(
        "DateTime",
        const=True,
        description="The kind of reference, constant 'DateTime', for FrameOfReferenceDateTime.",
        title="DateTime Reference Kind",
    )
    name: Optional[str] = Field(
        None,
        description="The name of the DateTime format and reference.",
        example="UTC",
        title="DateTime Name",
    )
    persistableReference: str = Field(
        ...,
        description="The self-contained, persistable reference string uniquely identifying DateTime reference.",
        example='{"format":"yyyy-MM-ddTHH:mm:ssZ","timeZone":"UTC","type":"DTM"}',
        title="DateTime Persistable Reference",
    )
    propertyNames: Optional[List[str]] = Field(
        None,
        description='The list of property names, to which this meta data item provides DateTime context to. A full path like "StructureA.PropertyB" is required to define a unique context; "data" is omitted since frame-of reference normalization only applies to the data block.',
        example=["Acquisition.StartTime", "Acquisition.EndTime"],
        title="DateTime Property Names",
    )


class Meta3(RafsBaseModel):
    kind: str = Field(
        "AzimuthReference",
        const=True,
        description="The kind of reference, constant 'AzimuthReference', for FrameOfReferenceAzimuthReference.",
        title="AzimuthReference Reference Kind",
    )
    name: Optional[str] = Field(
        None,
        description="The name of the CRS or the symbol/name of the unit.",
        example="TrueNorth",
        title="AzimuthReference Name",
    )
    persistableReference: str = Field(
        ...,
        description="The self-contained, persistable reference string uniquely identifying AzimuthReference.",
        example='{"code":"TrueNorth","type":"AZR"}',
        title="AzimuthReference Persistable Reference",
    )
    propertyNames: Optional[List[str]] = Field(
        None,
        description='The list of property names, to which this meta data item provides AzimuthReference context to. A full path like "StructureA.PropertyB" is required to define a unique context; "data" is omitted since frame-of reference normalization only applies to the data block.',
        example=["Bearing"],
        title="AzimuthReference Property Names",
    )


class TestStep(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Time: Optional[float] = Field(
        None, description="Time recorded at this test step.", title="Time"
    )
    PorePressure: Optional[float] = Field(
        None,
        description="Pore pressure of the sample at this test step.",
        title="Pore Pressure",
    )
    ConfiningPressure: Optional[float] = Field(
        None,
        description="Confining stress applied to the sample for this test step.",
        title="Confining Pressure",
    )
    AxialStrain: Optional[float] = Field(
        None,
        description="Axial strain is a measure of how much a material deforms along its length when subjected to an axial load or force.",
        title="Axial Strain",
    )
    RadialStrain: Optional[float] = Field(
        None,
        description="This is the strain measured in the direction perpendicular to the axis of the cylindrical sample.",
        title="Radial Strain",
    )
    AxialStress: Optional[float] = Field(
        None,
        description="Axial stress is the internal force per unit area within a material that results from an axial load or force applied along its length.",
        title="Axial Stress",
    )
    DifferentialStress: Optional[float] = Field(
        None,
        description="The difference between the axial and confining stress applied to the sample.",
        title="Differential Stress",
    )
    AxialPWaveVelocity: Optional[float] = Field(
        None,
        description="A measure of how fast compressional (P) waves travel through a material when the material is subjected to axial stress.",
        title="Axial P Wave Velocity",
    )
    AxialSWaveVelocity: Optional[float] = Field(
        None,
        description="A measure of how fast shear waves (also known as secondary or S-waves) propagate through a core sample.",
        title="Axial S Wave Velocity",
    )


class YoungsModulus(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = Field(
        None, description="The value of Young's Modulus.", title="Value"
    )
    SampleStressLoadingStageID: Optional[
        constr(
            regex=r"^[\w\-\.]+:reference-data\-\-SampleStressLoadingStage:[\w\-\.\:\%]+:[0-9]*$"
        )
    ] = Field(
        None,
        description="Identifies whether this ratio was set during the loading or unloading stage.",
        title="Sample Stress Loading Stage ID",
    )


class PoissonsRatio(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    Value: Optional[float] = Field(
        None, description="The value of Poisson's Ratio.", title="Value"
    )
    SampleStressLoadingStageID: Optional[
        constr(
            regex=r"^[\w\-\.]+:reference-data\-\-SampleStressLoadingStage:[\w\-\.\:\%]+:[0-9]*$"
        )
    ] = Field(
        None,
        description="Identifies whether this ratio was set during the loading or unloading stage.",
        title="Sample Stress Loading Stage",
    )


class InterpretationItem(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    StageNumber: Optional[float] = Field(
        None,
        description="In multifrac stage tests, this identifies each fracture stage.",
        title="Stage Number",
    )
    PlugOrientationToBeddingPlaneNormal: Optional[float] = Field(
        None,
        description="The angle in degrees of plug orientation to bedding plane normal.",
        title="Plug Orientation To Bedding Plane Normal",
    )
    PeakCompressiveStrength: Optional[float] = Field(
        None,
        description="The highest value of axial stress reached during a triaxial compression test, corresponding to the point at which the material fails.",
        title="Peak Compressive Strength",
    )
    EffectiveCompressiveStrength: Optional[float] = Field(
        None,
        description="The compressive strength of a material, adjusted for the effects of pore pressure and effective stress conditions.",
        title="Effective Compressive Strength",
    )
    YoungsModulus: Optional[YoungsModulus] = Field(
        None,
        description="Young's modulus defines the ratio of tensile stress (force per unit area) to tensile strain (proportional deformation) in the linear elastic region of the material's stress-strain curve.",
        title="Young's Modulus",
    )
    PoissonsRatio: Optional[PoissonsRatio] = Field(
        None,
        description="A measure of the proportional decrease in diameter (or lateral strain) to the proportional increase in length (or longitudinal strain) when a material is subjected to uniaxial stress.",
        title="Poisson's Ratio",
    )
    UnconfinedCompressiveStrength: Optional[float] = Field(
        None,
        description="The maximum compressive stress that a material can bear before failure when it is subjected to an axial load but no lateral or confining stress.",
        title="Unconfined Compressive Strength",
    )
    InferredUnconfinedCompressiveStrength: Optional[float] = Field(
        None,
        description="Mohr-Coulomb Failure Analysis Unconfined Compressive Strength.",
        title="Inferred Unconfined Compressive Strength",
    )
    Cohesion: Optional[float] = Field(
        None, description="Mohr-Coulomb Failure Analysis Cohesion.", title="Cohesion"
    )
    InternalFrictionCoefficient: Optional[float] = Field(
        None,
        description="Mohr-Coulomb Failure Analysis Internal Friction Coefficient.",
        title="Internal Friction Coefficient",
    )
    InternalFrictionAngle: Optional[float] = Field(
        None,
        description="Mohr-Coulomb Failure Analysis Internal Friction Angle.",
        title="Internal Friction Angle",
    )
    Alpha: Optional[float] = Field(
        None, description="Drucker-Prager Failure Analysis Alpha.", title="Alpha"
    )
    Beta: Optional[float] = Field(
        None, description="Drucker-Prager Failure Analysis Beta.", title="Beta"
    )


class TriaxialModel100(RafsBaseModel):
    class Config:
        extra = Extra.forbid

    SamplesAnalysisID: constr(
        regex=r"^[\w\-\.]+:work-product-component\-\-SamplesAnalysis:[\w\-\.\:\%]+:[0-9]*$"
    ) = Field(
        ...,
        description="OSDU Identifier for this SamplesAnalysis.",
        title="Samples Analysis ID",
    )
    SampleID: constr(
        regex=r"^[\w\-\.]+:master-data\-\-Sample:[\w\-\.\:\%]+:[0-9]*$"
    ) = Field(
        ...,
        description="OSDU Identifier for the Sample associated with this analysis.",
        title="Sample ID",
    )
    Meta: List[Union[Meta, Meta1, Meta2, Meta3]] = Field(
        ...,
        description="A meta data item, which allows the association of named properties or property values to a Unit/Measurement/CRS/Azimuth/Time context.",
        example="",
        title="Meta",
    )
    BulkDensityAsReceived: Optional[float] = Field(
        None,
        description="The bulk density of the sample as it was received by the laboratory.",
        title="Bulk Density As Received",
    )
    TestPorePressure: Optional[float] = Field(
        None, description="The pore pressure of the sample.", title="Test Pore Pressure"
    )
    TestConfiningPressure: Optional[float] = Field(
        None,
        description="The confining pressure applied to the sample.",
        title="Test Confining Pressure",
    )
    FluidSaturant: Optional[
        constr(
            regex=r"^[\w\-\.]+:reference-data\-\-SampleInjectionFluidType:[\w\-\.\:\%]+:[0-9]*$"
        )
    ] = Field(
        None,
        description="The fluid used to saturate the sample.",
        title="Fluid Saturant",
    )
    IRSCPorePressure: Optional[float] = Field(
        None,
        description="Pore pressure as recorded at initial reservoir stress conditions.",
        title="IRSC Pore Pressure",
    )
    IRSCMeanEffectiveStress: Optional[float] = Field(
        None,
        description="Mean effective stress as recorded at initial reservoir stress conditions.",
        title="IRSC Mean Effective Stress",
    )
    IRSCDifferentialStress: Optional[float] = Field(
        None,
        description="Differential stress as recorded at initial reservoir stress conditions.",
        title="IRSC Differentia Stress",
    )
    MassAsReceived: Optional[float] = Field(
        None,
        description="The mass of the sample as it was received by the laboratory.",
        title="Mass As Received",
    )
    SaturatedMass: Optional[float] = Field(
        None,
        description="The mass of the sample when saturated with the fluid saturant.",
        title="Saturated Mass",
    )
    CutFluid: Optional[
        constr(regex=r"^[\w\-\.]+:reference-data\-\-CutFluidType:[\w\-\.\:\%]+:[0-9]*$")
    ] = Field(
        None,
        description="Cutting Fluid used when preparing this sample for testing.",
        title="Cut Fluid",
    )
    LoadingCondition: Optional[str] = Field(
        None,
        description="String defining the loading conditions of the sample.",
        title="Loading Condition",
    )
    ConsolidationType: Optional[
        constr(
            regex=r"^[\w\-\.]+:reference-data\-\-ConsolidationType:[\w\-\.\:\%]+:[0-9]*$"
        )
    ] = Field(
        None,
        description="Consolidation Type, e.g. Isotropic.",
        title="Consolidation Type",
    )
    DrainageCondition: Optional[
        constr(
            regex=r"^[\w\-\.]+:reference-data\-\-DrainageCondition:[\w\-\.\:\%]+:[0-9]*$"
        )
    ] = Field(
        None,
        description="Categorization of drainage of the sample, e.g. Drained.",
        title="Drainage Condition",
    )
    SampleStressLoadingMethodID: Optional[
        constr(
            regex=r"^[\w\-\.]+:reference-data\-\-SampleStressLoadingMethod:[\w\-\.\:\%]+:[0-9]*$"
        )
    ] = Field(
        None,
        description="Method by which stress is applied, or loaded, onto the sample.",
        title="Sample Stress Loading Method ID",
    )
    TestSteps: Optional[List[TestStep]] = Field(
        None,
        description="Array that captures the individual test steps of this triaxial test.",
        title="Test Steps",
    )
    Interpretation: Optional[List[InterpretationItem]] = Field(
        None,
        description="Typically Interpretation will only have one record, though in cases where a sample is tested across multiple fracture stages, it will have more than one.",
        title="Interpretation",
    )
